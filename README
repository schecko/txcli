
Basics
- cargo build and cargo run should work as expected

Completeness
- I'll let you be the judge of that

Correctness
- There is an incomplete set of unit tests at the bottom of main.rs. A production product that handles currency for users would have more unit tests, but since this is a demo it should be good enough to write a decent set good enough to show a pattern.
- If this was a long term project, I would setup a test suite of input and expected output files and run the entire tool against each set. For this demo, manually running a couple is good enough.
- Testing coverage depends on the type of project, internal tools for example would see fewer tests unless they handled currency in some way, or security was a concern etc. Anything to do with money should see many tests.
- There is some minor usage of type safety, IDs are converted into NewTypes to ensure different types of IDs aren't used in the wrong context.

Safety and Robustness
- Robustness is handled by using fixed point math rather than floating point. Floating point numbers lose precision when adding large numbers with small numbers, and do not have associativity guarantees. 49 bits are used for the whole number, while 14 bits are used for the fractional component leaving one bit for the sign, allowing for numbers up to 562 949 953 421 312, with precision down to roughly 0.000061. Precision to exactly 0.00001 isn't possible with fixed point.
- Transaction errors are detected, ignored and printed out to stderr.
- Critical errors are printed to stderr and shutdown the process, such as providing the wrong argument, running out of memory, or serialization errors.

Efficiency
- Memory usage is currently O(n) with the number of transactions and O(m) with the number of clients. The input file is streamed via the csv crate, which uses an io::BufReader internally. To handle disputes that can reference any previous transaction, all previous transactions are retained in a hashmap assocaited with each client to avoid scanning the entire input file for every dispute. This would normally be stored in a database but this has been skipped for two main reasons: developmment time constraints, and limitations on running the cli tool without the need for further commands.
If you were looking for some sql database queries, feel free to take a look at (some fairly old) opensource school projects:
	- https://github.com/schecko/Akriveia/tree/master/server/backend/src/models
	- https://github.com/schecko/AniMangaIndex/blob/master/animanga/main/views.py
- The benefit of this memory scheme is that all gets into historical transactions or client states are O(1) using std::collections::HashMap with insertions amortized to O(1) assuming large datasets and assuming the underlying container is a vector.

Maintainability
- For such a short program, everything is in one file but I would start splitting up for more serious projects.
- Files are formatted using rustfmt.






